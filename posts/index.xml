<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Atwood&#39;s Blog</title>
    <link>http://atwoodwang.com/posts/</link>
    <description>Recent content in Posts on Atwood&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 23 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://atwoodwang.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入浅出 LevelDB (6) - SST文件</title>
      <link>http://atwoodwang.com/2020/leveldb_sst/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://atwoodwang.com/2020/leveldb_sst/</guid>
      <description>SST 文件 上一篇我们提到, 当memtable的大小达到一定的阈值, 会变为immutable memtable, 然后由后台线程异步刷新到磁盘上. LevelDB里的数</description>
    </item>
    
    <item>
      <title>深入浅出 LevelDB (5) - Memtable 内存表</title>
      <link>http://atwoodwang.com/2020/leveldb_memtable/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://atwoodwang.com/2020/leveldb_memtable/</guid>
      <description>Memtable Memtable是LevelDB的一个重要组成部分, 我们再回顾一篇LevelDB的架构. 在用户写入数据时, 首先会写入WAL文件(这个后面再</description>
    </item>
    
    <item>
      <title>深入浅出 LevelDB (4) - Varint 变长编码</title>
      <link>http://atwoodwang.com/2020/leveldb_varint/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://atwoodwang.com/2020/leveldb_varint/</guid>
      <description>Varint 编码 在深入到memtable之前, 我们还需要了解一个在LevelDB中广泛使用的一个编码格式: Varint (variable integer). 它是一种使用一个或多个字节序列化整数的</description>
    </item>
    
    <item>
      <title>深入浅出 LevelDB (3) - SkipList 跳跃链表</title>
      <link>http://atwoodwang.com/2020/leveldb_skiplist/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://atwoodwang.com/2020/leveldb_skiplist/</guid>
      <description>Skiplist 介绍 上一篇我们提到, LevelDB中的数据是按照key的值进行有序存储的. LevelDB在内存中存储数据的区域称为memtable, 这个m</description>
    </item>
    
    <item>
      <title>深入浅出 LevelDB (2) - Arena 内存池</title>
      <link>http://atwoodwang.com/2020/leveldb_arena/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://atwoodwang.com/2020/leveldb_arena/</guid>
      <description>Arena 内存池 内存池的存在主要就是减少malloc或者new调用的次数, 较少内存分配所带来的系统开销, 提升性能. LevelDB里自己实现了一个内存</description>
    </item>
    
    <item>
      <title>深入浅出 LevelDB (1) - 初识LevelDB</title>
      <link>http://atwoodwang.com/2020/leveldb_intro/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://atwoodwang.com/2020/leveldb_intro/</guid>
      <description>Intro 根据LevelDB官方介绍: LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values. LevelDB是一个可持久化的KV数据库引擎，是大名鼎鼎的BigTa</description>
    </item>
    
  </channel>
</rss>