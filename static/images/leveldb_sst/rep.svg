<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="325px" preserveAspectRatio="none" style="width:770px;height:325px;" version="1.1" viewBox="0 0 770 325" width="770px" zoomAndPan="magnify"><defs><filter height="300%" id="f11bjcd1wd0jwr" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[b2a694e6474a2a9b22a2e31fbfd4909a]
class Rep--><rect fill="#FEFECE" filter="url(#f11bjcd1wd0jwr)" height="307.1016" id="Rep" style="stroke: #A80036; stroke-width: 1.5;" width="752" x="7" y="7"/><ellipse cx="367.25" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M369.7231,29.1431 Q369.1421,29.4419 368.5029,29.5913 Q367.8638,29.7407 367.1582,29.7407 Q364.6514,29.7407 363.3315,28.0889 Q362.0117,26.437 362.0117,23.3159 Q362.0117,20.1865 363.3315,18.5347 Q364.6514,16.8828 367.1582,16.8828 Q367.8638,16.8828 368.5112,17.0322 Q369.1587,17.1816 369.7231,17.4805 L369.7231,20.2031 Q369.0923,19.6221 368.4988,19.3523 Q367.9053,19.0825 367.2744,19.0825 Q365.9297,19.0825 365.2449,20.1492 Q364.5601,21.2158 364.5601,23.3159 Q364.5601,25.4077 365.2449,26.4744 Q365.9297,27.541 367.2744,27.541 Q367.9053,27.541 368.4988,27.2712 Q369.0923,27.0015 369.7231,26.4204 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="23" x="387.75" y="27.5352">Rep</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8" x2="758" y1="39" y2="39"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="13" y="53.6348">Options options; // 配置的参数</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="13" y="66.5898">Options index_block_options; // index block的配置参数</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="13" y="79.5449">WritableFile* file; // sst文件封装类</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="13" y="92.5">uint64_t offset; // sst文件的偏移量, 每写一个块就刷新一次</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="13" y="105.4551">Status status; // 类的操作状态</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13" y="118.4102">BlockBuilder data_block; // 写数据块的类</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="13" y="131.3652">BlockBuilder index_block; // 写index块的类</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="13" y="144.3203">std::string last_key; // 当前已经写入的最后一个key</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="13" y="157.2754">int64_t num_entries; // 当前sst文件里一共的记录数</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="13" y="170.2305">bool closed;  // 是否sst文件已经关闭</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="13" y="183.1855">FilterBlockBuilder* filter_block;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="16" y="196.1406"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="740" x="13" y="209.0957">// 当pending_index_entry为空时, 证明上一个block已经结束了, 然后传入的key是新的block的第一个key, 这个时候我们可以为上一个block生成index</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="610" x="13" y="222.0508">// 之所以等插入新的block的第一个key的时候再生成index, 是因为这样可以节省index空间. 比如上一个block的最后的key是</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="687" x="13" y="235.0059">// "the quick brown fox", 新block的第一个key是 "the who", 这样我们可以把上一个block的index key设成"the r", 因为它大于上一个block</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="472" x="13" y="247.9609">// 的最后一个key, 也小于新block的第一个key, 但是这个只有当我们看到"the who"的时候才知道</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="13" y="260.916">bool pending_index_entry;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="16" y="273.8711"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="539" x="13" y="286.8262">BlockHandle pending_handle;  // 存的是上一个block在文件的偏移量开始地址和block的长度, 用来生成索引</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="13" y="299.7813">std::string compressed_output; // 压缩后的内容</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8" x2="758" y1="306.1016" y2="306.1016"/><!--MD5=[fb7c77d1d8bcf5c94fbcfb5c6a049a97]
@startuml
class Rep {
  Options options; // 配置的参数
  Options index_block_options; // index block的配置参数
  WritableFile* file; // sst文件封装类
  uint64_t offset; // sst文件的偏移量, 每写一个块就刷新一次
  Status status; // 类的操作状态
  BlockBuilder data_block; // 写数据块的类
  BlockBuilder index_block; // 写index块的类
  std::string last_key; // 当前已经写入的最后一个key
  int64_t num_entries; // 当前sst文件里一共的记录数
  bool closed;  // 是否sst文件已经关闭
  FilterBlockBuilder* filter_block;

  // 当pending_index_entry为空时, 证明上一个block已经结束了, 然后传入的key是新的block的第一个key, 这个时候我们可以为上一个block生成index
  // 之所以等插入新的block的第一个key的时候再生成index, 是因为这样可以节省index空间. 比如上一个block的最后的key是
  // "the quick brown fox", 新block的第一个key是 "the who", 这样我们可以把上一个block的index key设成"the r", 因为它大于上一个block
  // 的最后一个key, 也小于新block的第一个key, 但是这个只有当我们看到"the who"的时候才知道
  bool pending_index_entry;

  BlockHandle pending_handle;  // 存的是上一个block在文件的偏移量开始地址和block的长度, 用来生成索引
  std::string compressed_output; // 压缩后的内容
}
@enduml

PlantUML version 1.2020.03beta6(Unknown compile time)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.4+10-b304.77
Operating System: Mac OS X
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>
