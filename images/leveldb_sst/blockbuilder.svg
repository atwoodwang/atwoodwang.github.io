<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="208px" preserveAspectRatio="none" style="width:604px;height:208px;" version="1.1" viewBox="0 0 604 208" width="604px" zoomAndPan="magnify"><defs><filter height="300%" id="f7c83urvta71u" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[a287ee9191ab8547a4d439a570244410]
class BlockBuilder--><rect fill="#FEFECE" filter="url(#f7c83urvta71u)" height="190.5059" id="BlockBuilder" style="stroke: #A80036; stroke-width: 1.5;" width="586" x="7" y="7"/><ellipse cx="260.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M263.2231,29.1431 Q262.6421,29.4419 262.0029,29.5913 Q261.3638,29.7407 260.6582,29.7407 Q258.1514,29.7407 256.8315,28.0889 Q255.5117,26.437 255.5117,23.3159 Q255.5117,20.1865 256.8315,18.5347 Q258.1514,16.8828 260.6582,16.8828 Q261.3638,16.8828 262.0112,17.0322 Q262.6587,17.1816 263.2231,17.4805 L263.2231,20.2031 Q262.5923,19.6221 261.9988,19.3523 Q261.4053,19.0825 260.7744,19.0825 Q259.4297,19.0825 258.7449,20.1492 Q258.0601,21.2158 258.0601,23.3159 Q258.0601,25.4077 258.7449,26.4744 Q259.4297,27.541 260.7744,27.541 Q261.4053,27.541 261.9988,27.2712 Q262.5923,27.0015 263.2231,26.4204 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="281.25" y="27.5352">BlockBuilder</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8" x2="592" y1="39" y2="39"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="47"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="27" y="53.6348">const Options* options_; // 定义了一些配置, 比如每隔多少条记录添加一个restart point或者每个block的大小</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="59.9551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="27" y="66.5898">std::string buffer_; // 这个块的所有数据，数据一条一条添加到这个string中</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="72.9102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="27" y="79.5449">std::vector&lt;uint32_t&gt; restarts_; // 存储每一个Restart point</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="85.8652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="27" y="92.5">int counter_; // 自上个重启点起, 记录的条数</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="98.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="27" y="105.4551">bool finished_; // 是否finish方法已经被调用, 即这个block已经关闭</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="111.7754"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="387" x="27" y="118.4102">std::string last_key_; // 每次写记录时的上一条记录, 用来判断共享的前缀长度</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8" x2="592" y1="124.7305" y2="124.7305"/><ellipse cx="18" cy="135.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="27" y="139.3652">void Reset(); // 重置block</text><ellipse cx="18" cy="148.6855" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="375" x="27" y="152.3203">void Add(const Slice&amp; key, const Slice&amp; value); // 往当前块增加一条记录</text><ellipse cx="18" cy="161.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="27" y="165.2754">Slice Finish(); // 当前块写结束, 返回这个块的所有内容</text><ellipse cx="18" cy="174.5957" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="560" x="27" y="178.2305">size_t CurrentSizeEstimate() const; // 估计这个块的数据量, 用于判断当前块是否大于option当中定义block大小</text><ellipse cx="18" cy="187.5508" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="27" y="191.1855">bool empty(); // block是否为空</text><!--MD5=[194b75a913553a818d9797f4d51bfcca]
@startuml
class BlockBuilder {
  -const Options* options_; // 定义了一些配置, 比如每隔多少条记录添加一个restart point或者每个block的大小
  -std::string buffer_; // 这个块的所有数据，数据一条一条添加到这个string中
  -std::vector<uint32_t> restarts_; // 存储每一个Restart point
  -int counter_; // 自上个重启点起, 记录的条数
  -bool finished_; // 是否finish方法已经被调用, 即这个block已经关闭
  -std::string last_key_; // 每次写记录时的上一条记录, 用来判断共享的前缀长度
  +void Reset(); // 重置block
  +void Add(const Slice& key, const Slice& value); // 往当前块增加一条记录
  +Slice Finish(); // 当前块写结束, 返回这个块的所有内容
  +size_t CurrentSizeEstimate() const; // 估计这个块的数据量, 用于判断当前块是否大于option当中定义block大小
  +bool empty(); // block是否为空
}
@enduml

PlantUML version 1.2020.03beta6(Unknown compile time)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.4+10-b304.77
Operating System: Mac OS X
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>
